import os
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from openai import OpenAI
from dotenv import load_dotenv
from fastapi.middleware.cors import CORSMiddleware  # üëà –¥–æ–±–∞–≤–∏–ª–∏
from fastapi.responses import JSONResponse

# === 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env ===
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

if not api_key:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API-–∫–ª—é—á. –î–æ–±–∞–≤—å –µ–≥–æ –≤ —Ñ–∞–π–ª .env")

client = OpenAI(api_key=api_key)

# === 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = FastAPI(title="Blog Post Generator API", version="1.0.0")

# === 3. –î–æ–±–∞–≤–ª—è–µ–º CORS (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Swagger UI) ===
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],          # —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∞)
    allow_credentials=True,
    allow_methods=["*"],          # —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã (GET, POST, ...)
    allow_headers=["*"],          # —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# === 4. –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö ===
class Topic(BaseModel):
    topic: str

# === 5. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===
def generate_post(topic: str):
    try:
        prompt = (
            f"–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram –Ω–∞ —Ç–µ–º—É '{topic}'. "
            f"–§–æ—Ä–º–∞—Ç: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –º–µ—Ç–∞–æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏."
        )
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1000,
            temperature=0.7,
        )
        content = response.choices[0].message.content.strip()
        return {"topic": topic, "post": content}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# === 6. –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ===
@app.post("/generate-post")
async def generate_post_api(data: Topic):
    post = generate_post(data.topic)
    return JSONResponse(
        content={"topic": data.topic, "post": post},
        ensure_ascii=False  # üî• –≤—ã–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    )

@app.get("/")
async def root():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ.
    """
    return {
        "message": "üöÄ Blog Post Generator API is running",
        "version": "1.0.0",
        "author": "vaarid (–ï–≤–≥–µ–Ω–∏–π)"
    }

@app.get("/heartbeat")
async def heartbeat():
    return {"status": "OK"}

# === 7. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=True)
